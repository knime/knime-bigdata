<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE knimeNode PUBLIC "-//UNIKN//DTD KNIME Node 2.0//EN" "http://www.knime.org/Node.dtd">
<knimeNode icon="column_rename_regex.png" type="Manipulator">
    <name>Spark Column Rename (Regex)</name>

    <shortDescription>Renames all columns based on regular expression search 
        &amp; replace pattern.   
    </shortDescription>

    <fullDescription>
        <intro>
            <p>
              Renames all columns based on a regular expression search
              &amp; replace pattern. The search pattern is a regular expression,
			  possibly containing groups for further back referencing in the
			  replace field.
            </p>
            <p>
			 In the simplest case, you can search and replace string literals. 
			 E.g. if the input columns are called "Foo 1", "Foo 2", "Foo 3", 
			 etc and the search string is "Foo", the replacement is "Bar", the
			 output would be "Bar 1", "Bar 2", "Bar 3".
            </p>
            <p>
              More complicated cases contain <a href=
              "http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html#cg">
              capturing groups</a>, i.e. expressions in parentheses that, if 
              matched in a column name, are saved. The groups can be referenced
              in the replacement string using <tt>$g</tt>, whereby <tt>g</tt>
              is a number 0-9. These placeholders will be replaced by the 
              original occurrence in the input column name.
              For instance, to rename the columns that are produced by the 
              Data Generator node (they follow a scheme 
              <tt>Universe_&lt;number1&gt;_&lt;number2&gt;</tt>) to
              <tt>&lt;number2&gt; (Uni &lt;number1&gt;)</tt>, you would use as
              search string: "Universe_(\d+)_(\d+)" and as replacement:
              "$2 (Uni $1)".
            </p>
            <p>
              The special sequence <tt>$i</tt> represents the current column 
              index (unless escaped by '\' (backslash)). E.g. in order to
              precede each column name with the column index, use as search
              string "(^.+$)", capturing the entire column name in a group,
              and as replacement "$i: $1". 
            </p>
            <p>
              Further documentation regarding regular expressions can be found 
              in the Java API documentation, in particular the classes <a href=
              "http://download.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html">
              Pattern</a> and <a href=
              "http://download.oracle.com/javase/6/docs/api/java/util/regex/Matcher.html">
              Matcher</a>. 
            </p>
        </intro>
        <option name="Search String (regexp)">
            The search pattern, which may contain group patterns used in
            back references. 
        </option>
        <option name="Replacement">
            The replacement string. Use $1, $2, etc. to address the groups
            defined in the search pattern.
        </option>
        <option name="Case Insensitive">
            Enables case-insensitive matching. 
        </option>
        <option name="Literal">
            When this flag is specified then the search string is treated as a
            sequence of literal characters. Metacharacters or escape sequences
            in the input sequence will be given no special meaning. 
        </option>
    </fullDescription>

    <ports>
        <inPort index="0" name="Input RDD">Arbitrary input RDD.</inPort>
        <outPort index="0" name="Input RDD with renamed columns">
            Input RDD with renamed columns according to configuration
            parameters.
        </outPort>
    </ports>
</knimeNode>
