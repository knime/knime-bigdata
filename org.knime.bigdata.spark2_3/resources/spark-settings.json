[ {
  "setting" : "spark.app.name",
  "default" : null,
  "description" : "The name of your application. This will appear in the UI and in log data."
}, {
  "setting" : "spark.driver.cores",
  "default" : "1",
  "description" : "Number of cores to use for the driver process, only in cluster mode."
}, {
  "setting" : "spark.driver.maxResultSize",
  "default" : "1g",
  "description" : "Limit of total size of serialized results of all partitions for each Spark action (e.g. collect). Should be at least 1M, or 0 for unlimited. Jobs will be aborted if the total size is above this limit. Having a high limit may cause out-of-memory errors in driver (depends on spark.driver.memory and memory overhead of objects in JVM). Setting a proper limit can protect the driver from out-of-memory errors."
}, {
  "setting" : "spark.driver.memory",
  "default" : "1g",
  "description" : "Amount of memory to use for the driver process, i.e. where SparkContext is initialized. (e.g. 1g, 2g). Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-memory command line option or in your default properties file."
}, {
  "setting" : "spark.executor.memory",
  "default" : "1g",
  "description" : "Amount of memory to use per executor process (e.g. 2g, 8g)."
}, {
  "setting" : "spark.extraListeners",
  "default" : null,
  "description" : "A comma-separated list of classes that implement SparkListener; when initializing SparkContext, instances of these classes will be created and registered with Spark's listener bus. If a class has a single-argument constructor that accepts a SparkConf, that constructor will be called; otherwise, a zero-argument constructor will be called. If no valid constructor can be found, the SparkContext creation will fail with an exception."
}, {
  "setting" : "spark.local.dir",
  "default" : "/tmp",
  "description" : "Directory to use for \"scratch\" space in Spark, including map output files and RDDs that get stored on disk. This should be on a fast, local disk in your system. It can also be a comma-separated list of multiple directories on different disks. NOTE: In Spark 1.0 and later this will be overridden by SPARK_LOCAL_DIRS (Standalone, Mesos) or LOCAL_DIRS (YARN) environment variables set by the cluster manager."
}, {
  "setting" : "spark.logConf",
  "default" : "false",
  "description" : "Logs the effective SparkConf as INFO when a SparkContext is started."
}, {
  "setting" : "spark.master",
  "default" : null,
  "description" : "The cluster manager to connect to. See the list of allowed master URL's."
}, {
  "setting" : "spark.submit.deployMode",
  "default" : null,
  "description" : "The deploy mode of Spark driver program, either \"client\" or \"cluster\", Which means to launch driver program locally (\"client\") or remotely (\"cluster\") on one of the nodes inside the cluster."
}, {
  "setting" : "spark.log.callerContext",
  "default" : null,
  "description" : "Application information that will be written into Yarn RM log/HDFS audit log when running on Yarn/HDFS. Its length depends on the Hadoop configuration hadoop.caller.context.max.size. It should be concise, and typically can have up to 50 characters."
}, {
  "setting" : "spark.driver.supervise",
  "default" : "false",
  "description" : "If true, restarts the driver automatically if it fails with a non-zero exit status. Only has effect in Spark standalone mode or Mesos cluster deploy mode."
}, {
  "setting" : "spark.driver.extraClassPath",
  "default" : null,
  "description" : "Extra classpath entries to prepend to the classpath of the driver. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-class-path command line option or in your default properties file."
}, {
  "setting" : "spark.driver.extraJavaOptions",
  "default" : null,
  "description" : "A string of extra JVM options to pass to the driver. For instance, GC settings or other logging. Note that it is illegal to set maximum heap size (-Xmx) settings with this option. Maximum heap size settings can be set with spark.driver.memory in the cluster mode and through the --driver-memory command line option in the client mode. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-java-options command line option or in your default properties file."
}, {
  "setting" : "spark.driver.extraLibraryPath",
  "default" : null,
  "description" : "Set a special library path to use when launching the driver JVM. Note: In client mode, this config must not be set through the SparkConf directly in your application, because the driver JVM has already started at that point. Instead, please set this through the --driver-library-path command line option or in your default properties file."
}, {
  "setting" : "spark.driver.userClassPathFirst",
  "default" : "false",
  "description" : "(Experimental) Whether to give user-added jars precedence over Spark's own jars when loading classes in the driver. This feature can be used to mitigate conflicts between Spark's dependencies and user dependencies. It is currently an experimental feature. This is used in cluster mode only."
}, {
  "setting" : "spark.executor.extraClassPath",
  "default" : null,
  "description" : "Extra classpath entries to prepend to the classpath of executors. This exists primarily for backwards-compatibility with older versions of Spark. Users typically should not need to set this option."
}, {
  "setting" : "spark.executor.extraJavaOptions",
  "default" : null,
  "description" : "A string of extra JVM options to pass to executors. For instance, GC settings or other logging. Note that it is illegal to set Spark properties or maximum heap size (-Xmx) settings with this option. Spark properties should be set using a SparkConf object or the spark-defaults.conf file used with the spark-submit script. Maximum heap size settings can be set with spark.executor.memory."
}, {
  "setting" : "spark.executor.extraLibraryPath",
  "default" : null,
  "description" : "Set a special library path to use when launching executor JVM's."
}, {
  "setting" : "spark.executor.logs.rolling.maxRetainedFiles",
  "default" : null,
  "description" : "Sets the number of latest rolling log files that are going to be retained by the system. Older log files will be deleted. Disabled by default."
}, {
  "setting" : "spark.executor.logs.rolling.enableCompression",
  "default" : "false",
  "description" : "Enable executor log compression. If it is enabled, the rolled executor logs will be compressed. Disabled by default."
}, {
  "setting" : "spark.executor.logs.rolling.maxSize",
  "default" : null,
  "description" : "Set the max size of the file in bytes by which the executor logs will be rolled over. Rolling is disabled by default. See spark.executor.logs.rolling.maxRetainedFiles for automatic cleaning of old logs."
}, {
  "setting" : "spark.executor.logs.rolling.strategy",
  "default" : null,
  "description" : "Set the strategy of rolling of executor logs. By default it is disabled. It can be set to \"time\" (time-based rolling) or \"size\" (size-based rolling). For \"time\", use spark.executor.logs.rolling.time.interval to set the rolling interval. For \"size\", use spark.executor.logs.rolling.maxSize to set the maximum file size for rolling."
}, {
  "setting" : "spark.executor.logs.rolling.time.interval",
  "default" : "daily",
  "description" : "Set the time interval by which the executor logs will be rolled over. Rolling is disabled by default. Valid values are daily, hourly, minutely or any interval in seconds. See spark.executor.logs.rolling.maxRetainedFiles for automatic cleaning of old logs."
}, {
  "setting" : "spark.executor.userClassPathFirst",
  "default" : "false",
  "description" : "(Experimental) Same functionality as spark.driver.userClassPathFirst, but applied to executor instances."
}, {
  "setting" : "spark.executorEnv.[EnvironmentVariableName]",
  "default" : null,
  "description" : "Add the environment variable specified by EnvironmentVariableName to the Executor process. The user can specify multiple of these to set multiple environment variables."
}, {
  "setting" : "spark.redaction.regex",
  "default" : "(?i)secret|password",
  "description" : "Regex to decide which Spark configuration properties and environment variables in driver and executor environments contain sensitive information. When this regex matches a property key or value, the value is redacted from the environment UI and various logs like YARN and event logs."
}, {
  "setting" : "spark.python.profile",
  "default" : "false",
  "description" : "Enable profiling in Python worker, the profile result will show up by sc.show_profiles(), or it will be displayed before the driver exiting. It also can be dumped into disk by sc.dump_profiles(path). If some of the profile results had been displayed manually, they will not be displayed automatically before driver exiting. By default the pyspark.profiler.BasicProfiler will be used, but this can be overridden by passing a profiler class in as a parameter to the SparkContext constructor."
}, {
  "setting" : "spark.python.profile.dump",
  "default" : null,
  "description" : "The directory which is used to dump the profile result before driver exiting. The results will be dumped as separated file for each RDD. They can be loaded by ptats.Stats(). If this is specified, the profile result will not be displayed automatically."
}, {
  "setting" : "spark.python.worker.memory",
  "default" : "512m",
  "description" : "Amount of memory to use per python worker process during aggregation, in the same format as JVM memory strings (e.g. 512m, 2g). If the memory used during aggregation goes above this amount, it will spill the data into disks."
}, {
  "setting" : "spark.python.worker.reuse",
  "default" : "true",
  "description" : "Reuse Python worker or not. If yes, it will use a fixed number of Python workers, does not need to fork() a Python process for every tasks. It will be very useful if there is large broadcast, then the broadcast will not be needed to transferred from JVM to Python worker for every task."
}, {
  "setting" : "spark.files",
  "default" : null,
  "description" : "Comma-separated list of files to be placed in the working directory of each executor."
}, {
  "setting" : "spark.submit.pyFiles",
  "default" : null,
  "description" : "Comma-separated list of .zip, .egg, or .py files to place on the PYTHONPATH for Python apps."
}, {
  "setting" : "spark.jars",
  "default" : null,
  "description" : "Comma-separated list of local jars to include on the driver and executor classpaths."
}, {
  "setting" : "spark.jars.packages",
  "default" : null,
  "description" : "Comma-separated list of Maven coordinates of jars to include on the driver and executor classpaths. The coordinates should be groupId:artifactId:version. If spark.jars.ivySettings is given artifacts will be resolved according to the configuration in the file, otherwise artifacts will be searched for in the local maven repo, then maven central and finally any additional remote repositories given by the command-line option --repositories. For more details, see Advanced Dependency Management."
}, {
  "setting" : "spark.jars.excludes",
  "default" : null,
  "description" : "Comma-separated list of groupId:artifactId, to exclude while resolving the dependencies provided in spark.jars.packages to avoid dependency conflicts."
}, {
  "setting" : "spark.jars.ivy",
  "default" : null,
  "description" : "Path to specify the Ivy user directory, used for the local Ivy cache and package files from spark.jars.packages. This will override the Ivy property ivy.default.ivy.user.dir which defaults to ~/.ivy2."
}, {
  "setting" : "spark.jars.ivySettings",
  "default" : null,
  "description" : "Path to an Ivy settings file to customize resolution of jars specified using spark.jars.packages instead of the built-in defaults, such as maven central. Additional repositories given by the command-line option --repositories will also be included. Useful for allowing Spark to resolve artifacts from behind a firewall e.g. via an in-house artifact server like Artifactory. Details on the settings file format can be found at http://ant.apache.org/ivy/history/latest-milestone/settings.html"
}, {
  "setting" : "spark.pyspark.driver.python",
  "default" : null,
  "description" : "Python binary executable to use for PySpark in driver. (default is spark.pyspark.python)"
}, {
  "setting" : "spark.pyspark.python",
  "default" : null,
  "description" : "Python binary executable to use for PySpark in both driver and executors."
}, {
  "setting" : "spark.reducer.maxSizeInFlight",
  "default" : "48m",
  "description" : "Maximum size of map outputs to fetch simultaneously from each reduce task. Since each output requires us to create a buffer to receive it, this represents a fixed memory overhead per reduce task, so keep it small unless you have a large amount of memory."
}, {
  "setting" : "spark.reducer.maxReqsInFlight",
  "default" : "2147483647",
  "description" : "This configuration limits the number of remote requests to fetch blocks at any given point. When the number of hosts in the cluster increase, it might lead to very large number of in-bound connections to one or more nodes, causing the workers to fail under load. By allowing it to limit the number of fetch requests, this scenario can be mitigated."
}, {
  "setting" : "spark.shuffle.compress",
  "default" : "true",
  "description" : "Whether to compress map output files. Generally a good idea. Compression will use spark.io.compression.codec."
}, {
  "setting" : "spark.shuffle.file.buffer",
  "default" : "32k",
  "description" : "Size of the in-memory buffer for each shuffle file output stream. These buffers reduce the number of disk seeks and system calls made in creating intermediate shuffle files."
}, {
  "setting" : "spark.shuffle.io.maxRetries",
  "default" : "3",
  "description" : "(Netty only) Fetches that fail due to IO-related exceptions are automatically retried if this is set to a non-zero value. This retry logic helps stabilize large shuffles in the face of long GC pauses or transient network connectivity issues."
}, {
  "setting" : "spark.shuffle.io.numConnectionsPerPeer",
  "default" : "1",
  "description" : "(Netty only) Connections between hosts are reused in order to reduce connection buildup for large clusters. For clusters with many hard disks and few hosts, this may result in insufficient concurrency to saturate all disks, and so users may consider increasing this value."
}, {
  "setting" : "spark.shuffle.io.preferDirectBufs",
  "default" : "true",
  "description" : "(Netty only) Off-heap buffers are used to reduce garbage collection during shuffle and cache block transfer. For environments where off-heap memory is tightly limited, users may wish to turn this off to force all allocations from Netty to be on-heap."
}, {
  "setting" : "spark.shuffle.io.retryWait",
  "default" : "5s",
  "description" : "(Netty only) How long to wait between retries of fetches. The maximum delay caused by retrying is 15 seconds by default, calculated as maxRetries * retryWait."
}, {
  "setting" : "spark.shuffle.service.enabled",
  "default" : "false",
  "description" : "Enables the external shuffle service. This service preserves the shuffle files written by executors so the executors can be safely removed. This must be enabled if spark.dynamicAllocation.enabled is \"true\". The external shuffle service must be set up in order to enable it. See dynamic allocation configuration and setup documentation for more information."
}, {
  "setting" : "spark.shuffle.service.port",
  "default" : "7337",
  "description" : "Port on which the external shuffle service will run."
}, {
  "setting" : "spark.shuffle.service.index.cache.entries",
  "default" : "1024",
  "description" : "Max number of entries to keep in the index cache of the shuffle service."
}, {
  "setting" : "spark.shuffle.sort.bypassMergeThreshold",
  "default" : "200",
  "description" : "(Advanced) In the sort-based shuffle manager, avoid merge-sorting data if there is no map-side aggregation and there are at most this many reduce partitions."
}, {
  "setting" : "spark.shuffle.spill.compress",
  "default" : "true",
  "description" : "Whether to compress data spilled during shuffles. Compression will use spark.io.compression.codec."
}, {
  "setting" : "spark.shuffle.accurateBlockThreshold",
  "default" : null,
  "description" : "When we compress the size of shuffle blocks in HighlyCompressedMapStatus, we will record the size accurately if it's above this config. This helps to prevent OOM by avoiding underestimating shuffle block size when fetch shuffle blocks."
}, {
  "setting" : "spark.io.encryption.enabled",
  "default" : "false",
  "description" : "Enable IO encryption. Currently supported by all modes except Mesos. It's recommended that RPC encryption be enabled when using this feature."
}, {
  "setting" : "spark.io.encryption.keySizeBits",
  "default" : "128",
  "description" : "IO encryption key size in bits. Supported values are 128, 192 and 256."
}, {
  "setting" : "spark.io.encryption.keygen.algorithm",
  "default" : "HmacSHA1",
  "description" : "The algorithm to use when generating the IO encryption key. The supported algorithms are described in the KeyGenerator section of the Java Cryptography Architecture Standard Algorithm Name Documentation."
}, {
  "setting" : "spark.eventLog.compress",
  "default" : "false",
  "description" : "Whether to compress logged events, if spark.eventLog.enabled is true. Compression will use spark.io.compression.codec."
}, {
  "setting" : "spark.eventLog.dir",
  "default" : "file:///tmp/spark-events",
  "description" : "Base directory in which Spark events are logged, if spark.eventLog.enabled is true. Within this base directory, Spark creates a sub-directory for each application, and logs the events specific to the application in this directory. Users may want to set this to a unified location like an HDFS directory so history files can be read by the history server."
}, {
  "setting" : "spark.eventLog.enabled",
  "default" : "false",
  "description" : "Whether to log Spark events, useful for reconstructing the Web UI after the application has finished."
}, {
  "setting" : "spark.ui.enabled",
  "default" : "true",
  "description" : "Whether to run the web UI for the Spark application."
}, {
  "setting" : "spark.ui.killEnabled",
  "default" : "true",
  "description" : "Allows jobs and stages to be killed from the web UI."
}, {
  "setting" : "spark.ui.port",
  "default" : "4040",
  "description" : "Port for your application's dashboard, which shows memory and workload data."
}, {
  "setting" : "spark.ui.retainedJobs",
  "default" : "1000",
  "description" : "How many jobs the Spark UI and status APIs remember before garbage collecting. This is a target maximum, and fewer elements may be retained in some circumstances."
}, {
  "setting" : "spark.ui.retainedStages",
  "default" : "1000",
  "description" : "How many stages the Spark UI and status APIs remember before garbage collecting. This is a target maximum, and fewer elements may be retained in some circumstances."
}, {
  "setting" : "spark.ui.retainedTasks",
  "default" : "100000",
  "description" : "How many tasks the Spark UI and status APIs remember before garbage collecting. This is a target maximum, and fewer elements may be retained in some circumstances."
}, {
  "setting" : "spark.ui.reverseProxy",
  "default" : "false",
  "description" : "Enable running Spark Master as reverse proxy for worker and application UIs. In this mode, Spark master will reverse proxy the worker and application UIs to enable access without requiring direct access to their hosts. Use it with caution, as worker and application UI will not be accessible directly, you will only be able to access them through spark master/proxy public URL. This setting affects all the workers and application UIs running in the cluster and must be set on all the workers, drivers and masters."
}, {
  "setting" : "spark.ui.reverseProxyUrl",
  "default" : null,
  "description" : "This is the URL where your proxy is running. This URL is for proxy which is running in front of Spark Master. This is useful when running proxy for authentication e.g. OAuth proxy. Make sure this is a complete URL including scheme (http/https) and port to reach your proxy."
}, {
  "setting" : "spark.ui.showConsoleProgress",
  "default" : "true",
  "description" : "Show the progress bar in the console. The progress bar shows the progress of stages that run for longer than 500ms. If multiple stages run at the same time, multiple progress bars will be displayed on the same line."
}, {
  "setting" : "spark.worker.ui.retainedExecutors",
  "default" : "1000",
  "description" : "How many finished executors the Spark UI and status APIs remember before garbage collecting."
}, {
  "setting" : "spark.worker.ui.retainedDrivers",
  "default" : "1000",
  "description" : "How many finished drivers the Spark UI and status APIs remember before garbage collecting."
}, {
  "setting" : "spark.sql.ui.retainedExecutions",
  "default" : "1000",
  "description" : "How many finished executions the Spark UI and status APIs remember before garbage collecting."
}, {
  "setting" : "spark.streaming.ui.retainedBatches",
  "default" : "1000",
  "description" : "How many finished batches the Spark UI and status APIs remember before garbage collecting."
}, {
  "setting" : "spark.ui.retainedDeadExecutors",
  "default" : "100",
  "description" : "How many dead executors the Spark UI and status APIs remember before garbage collecting."
}, {
  "setting" : "spark.broadcast.compress",
  "default" : "true",
  "description" : "Whether to compress broadcast variables before sending them. Generally a good idea. Compression will use spark.io.compression.codec."
}, {
  "setting" : "spark.io.compression.codec",
  "default" : "lz4",
  "description" : "The codec used to compress internal data such as RDD partitions, event log, broadcast variables and shuffle outputs. By default, Spark provides three codecs: lz4, lzf, and snappy. You can also use fully qualified class names to specify the codec, e.g. org.apache.spark.io.LZ4CompressionCodec, org.apache.spark.io.LZFCompressionCodec, and org.apache.spark.io.SnappyCompressionCodec."
}, {
  "setting" : "spark.io.compression.lz4.blockSize",
  "default" : "32k",
  "description" : "Block size used in LZ4 compression, in the case when LZ4 compression codec is used. Lowering this block size will also lower shuffle memory usage when LZ4 is used."
}, {
  "setting" : "spark.io.compression.snappy.blockSize",
  "default" : "32k",
  "description" : "Block size used in Snappy compression, in the case when Snappy compression codec is used. Lowering this block size will also lower shuffle memory usage when Snappy is used."
}, {
  "setting" : "spark.kryo.classesToRegister",
  "default" : null,
  "description" : "If you use Kryo serialization, give a comma-separated list of custom class names to register with Kryo. See the tuning guide for more details."
}, {
  "setting" : "spark.kryo.referenceTracking",
  "default" : "true",
  "description" : "Whether to track references to the same object when serializing data with Kryo, which is necessary if your object graphs have loops and useful for efficiency if they contain multiple copies of the same object. Can be disabled to improve performance if you know this is not the case."
}, {
  "setting" : "spark.kryo.registrationRequired",
  "default" : "false",
  "description" : "Whether to require registration with Kryo. If set to 'true', Kryo will throw an exception if an unregistered class is serialized. If set to false (the default), Kryo will write unregistered class names along with each object. Writing class names can cause significant performance overhead, so enabling this option can enforce strictly that a user has not omitted classes from registration."
}, {
  "setting" : "spark.kryo.registrator",
  "default" : null,
  "description" : "If you use Kryo serialization, give a comma-separated list of classes that register your custom classes with Kryo. This property is useful if you need to register your classes in a custom way, e.g. to specify a custom field serializer. Otherwise spark.kryo.classesToRegister is simpler. It should be set to classes that extend KryoRegistrator. See the tuning guide for more details."
}, {
  "setting" : "spark.kryo.unsafe",
  "default" : "false",
  "description" : "Whether to use unsafe based Kryo serializer. Can be substantially faster by using Unsafe Based IO."
}, {
  "setting" : "spark.kryoserializer.buffer.max",
  "default" : "64m",
  "description" : "Maximum allowable size of Kryo serialization buffer. This must be larger than any object you attempt to serialize and must be less than 2048m. Increase this if you get a \"buffer limit exceeded\" exception inside Kryo."
}, {
  "setting" : "spark.kryoserializer.buffer",
  "default" : "64k",
  "description" : "Initial size of Kryo's serialization buffer. Note that there will be one buffer per core on each worker. This buffer will grow up to spark.kryoserializer.buffer.max if needed."
}, {
  "setting" : "spark.rdd.compress",
  "default" : "false",
  "description" : "Whether to compress serialized RDD partitions (e.g. for StorageLevel.MEMORY_ONLY_SER in Java and Scala or StorageLevel.MEMORY_ONLY in Python). Can save substantial space at the cost of some extra CPU time. Compression will use spark.io.compression.codec."
}, {
  "setting" : "spark.serializer",
  "default" : "org.apache.spark.serializer.JavaSerializer",
  "description" : "Class to use for serializing objects that will be sent over the network or need to be cached in serialized form. The default of Java serialization works with any Serializable Java object but is quite slow, so we recommend using org.apache.spark.serializer.KryoSerializer and configuring Kryo serialization when speed is necessary. Can be any subclass of org.apache.spark.Serializer."
}, {
  "setting" : "spark.serializer.objectStreamReset",
  "default" : "100",
  "description" : "When serializing using org.apache.spark.serializer.JavaSerializer, the serializer caches objects to prevent writing redundant data, however that stops garbage collection of those objects. By calling 'reset' you flush that info from the serializer, and allow old objects to be collected. To turn off this periodic reset set it to -1. By default it will reset the serializer every 100 objects."
}, {
  "setting" : "spark.memory.fraction",
  "default" : "0.6",
  "description" : "Fraction of (heap space - 300MB) used for execution and storage. The lower this is, the more frequently spills and cached data eviction occur. The purpose of this config is to set aside memory for internal metadata, user data structures, and imprecise size estimation in the case of sparse, unusually large records. Leaving this at the default value is recommended. For more detail, including important information about correctly tuning JVM garbage collection when increasing this value, see this description."
}, {
  "setting" : "spark.memory.storageFraction",
  "default" : "0.5",
  "description" : "Amount of storage memory immune to eviction, expressed as a fraction of the size of the region set aside by s​park.memory.fraction. The higher this is, the less working memory may be available to execution and tasks may spill to disk more often. Leaving this at the default value is recommended. For more detail, see this description."
}, {
  "setting" : "spark.memory.offHeap.enabled",
  "default" : "false",
  "description" : "If true, Spark will attempt to use off-heap memory for certain operations. If off-heap memory use is enabled, then spark.memory.offHeap.size must be positive."
}, {
  "setting" : "spark.memory.offHeap.size",
  "default" : "0",
  "description" : "The absolute amount of memory in bytes which can be used for off-heap allocation. This setting has no impact on heap memory usage, so if your executors' total memory consumption must fit within some hard limit then be sure to shrink your JVM heap size accordingly. This must be set to a positive value when spark.memory.offHeap.enabled=true."
}, {
  "setting" : "spark.memory.useLegacyMode",
  "default" : "false",
  "description" : "​Whether to enable the legacy memory management mode used in Spark 1.5 and before. The legacy mode rigidly partitions the heap space into fixed-size regions, potentially leading to excessive spilling if the application was not tuned. The following deprecated memory fraction configurations are not read unless this is enabled: spark.shuffle.memoryFractionspark.storage.memoryFractionspark.storage.unrollFraction"
}, {
  "setting" : "spark.shuffle.memoryFraction",
  "default" : "0.2",
  "description" : "(deprecated) This is read only if spark.memory.useLegacyMode is enabled. Fraction of Java heap to use for aggregation and cogroups during shuffles. At any given time, the collective size of all in-memory maps used for shuffles is bounded by this limit, beyond which the contents will begin to spill to disk. If spills are often, consider increasing this value at the expense of spark.storage.memoryFraction."
}, {
  "setting" : "spark.storage.memoryFraction",
  "default" : "0.6",
  "description" : "(deprecated) This is read only if spark.memory.useLegacyMode is enabled. Fraction of Java heap to use for Spark's memory cache. This should not be larger than the \"old\" generation of objects in the JVM, which by default is given 0.6 of the heap, but you can increase it if you configure your own old generation size."
}, {
  "setting" : "spark.storage.unrollFraction",
  "default" : "0.2",
  "description" : "(deprecated) This is read only if spark.memory.useLegacyMode is enabled. Fraction of spark.storage.memoryFraction to use for unrolling blocks in memory. This is dynamically allocated by dropping existing blocks when there is not enough free storage space to unroll the new block in its entirety."
}, {
  "setting" : "spark.storage.replication.proactive",
  "default" : "false",
  "description" : "Enables proactive block replication for RDD blocks. Cached RDD block replicas lost due to executor failures are replenished if there are any existing available replicas. This tries to get the replication level of the block to the initial number."
}, {
  "setting" : "spark.broadcast.blockSize",
  "default" : "4m",
  "description" : "Size of each piece of a block for TorrentBroadcastFactory. Too large a value decreases parallelism during broadcast (makes it slower); however, if it is too small, BlockManager might take a performance hit."
}, {
  "setting" : "spark.executor.cores",
  "default" : null,
  "description" : "The number of cores to use on each executor. In standalone and Mesos coarse-grained modes, setting this parameter allows an application to run multiple executors on the same worker, provided that there are enough cores on that worker. Otherwise, only one executor per application will run on each worker."
}, {
  "setting" : "spark.default.parallelism",
  "default" : null,
  "description" : "Default number of partitions in RDDs returned by transformations like join, reduceByKey, and parallelize when not set by user."
}, {
  "setting" : "spark.executor.heartbeatInterval",
  "default" : "10s",
  "description" : "Interval between each executor's heartbeats to the driver. Heartbeats let the driver know that the executor is still alive and update it with metrics for in-progress tasks. spark.executor.heartbeatInterval should be significantly less than spark.network.timeout"
}, {
  "setting" : "spark.files.fetchTimeout",
  "default" : "60s",
  "description" : "Communication timeout to use when fetching files added through SparkContext.addFile() from the driver."
}, {
  "setting" : "spark.files.useFetchCache",
  "default" : "true",
  "description" : "If set to true (default), file fetching will use a local cache that is shared by executors that belong to the same application, which can improve task launching performance when running many executors on the same host. If set to false, these caching optimizations will be disabled and all executors will fetch their own copies of files. This optimization may be disabled in order to use Spark local directories that reside on NFS filesystems (see SPARK-6313 for more details)."
}, {
  "setting" : "spark.files.overwrite",
  "default" : "false",
  "description" : "Whether to overwrite files added through SparkContext.addFile() when the target file exists and its contents do not match those of the source."
}, {
  "setting" : "spark.files.maxPartitionBytes",
  "default" : null,
  "description" : "The maximum number of bytes to pack into a single partition when reading files."
}, {
  "setting" : "spark.files.openCostInBytes",
  "default" : null,
  "description" : "The estimated cost to open a file, measured by the number of bytes could be scanned in the same time. This is used when putting multiple files into a partition. It is better to over estimate, then the partitions with small files will be faster than partitions with bigger files."
}, {
  "setting" : "spark.hadoop.cloneConf",
  "default" : "false",
  "description" : "If set to true, clones a new Hadoop Configuration object for each task. This option should be enabled to work around Configuration thread-safety issues (see SPARK-2546 for more details). This is disabled by default in order to avoid unexpected performance regressions for jobs that are not affected by these issues."
}, {
  "setting" : "spark.hadoop.validateOutputSpecs",
  "default" : "true",
  "description" : "If set to true, validates the output specification (e.g. checking if the output directory already exists) used in saveAsHadoopFile and other variants. This can be disabled to silence exceptions due to pre-existing output directories. We recommend that users do not disable this except if trying to achieve compatibility with previous versions of Spark. Simply use Hadoop's FileSystem API to delete output directories by hand. This setting is ignored for jobs generated through Spark Streaming's StreamingContext, since data may need to be rewritten to pre-existing output directories during checkpoint recovery."
}, {
  "setting" : "spark.storage.memoryMapThreshold",
  "default" : "2m",
  "description" : "Size of a block above which Spark memory maps when reading a block from disk. This prevents Spark from memory mapping very small blocks. In general, memory mapping has high overhead for blocks close to or below the page size of the operating system."
}, {
  "setting" : "spark.hadoop.mapreduce.fileoutputcommitter.algorithm.version",
  "default" : "1",
  "description" : "The file output committer algorithm version, valid algorithm version number: 1 or 2. Version 2 may have better performance, but version 1 may handle failures better in certain situations, as per MAPREDUCE-4815."
}, {
  "setting" : "spark.rpc.message.maxSize",
  "default" : "128",
  "description" : "Maximum message size (in MB) to allow in \"control plane\" communication; generally only applies to map output size information sent between executors and the driver. Increase this if you are running jobs with many thousands of map and reduce tasks and see messages about the RPC message size."
}, {
  "setting" : "spark.blockManager.port",
  "default" : null,
  "description" : "Port for all block managers to listen on. These exist on both the driver and the executors."
}, {
  "setting" : "spark.driver.blockManager.port",
  "default" : null,
  "description" : "Driver-specific port for the block manager to listen on, for cases where it cannot use the same configuration as executors."
}, {
  "setting" : "spark.driver.bindAddress",
  "default" : null,
  "description" : "Hostname or IP address where to bind listening sockets. This config overrides the SPARK_LOCAL_IP environment variable (see below). It also allows a different address from the local one to be advertised to executors or external systems. This is useful, for example, when running containers with bridged networking. For this to properly work, the different ports used by the driver (RPC, block manager and UI) need to be forwarded from the container's host."
}, {
  "setting" : "spark.driver.host",
  "default" : null,
  "description" : "Hostname or IP address for the driver. This is used for communicating with the executors and the standalone Master."
}, {
  "setting" : "spark.driver.port",
  "default" : null,
  "description" : "Port for the driver to listen on. This is used for communicating with the executors and the standalone Master."
}, {
  "setting" : "spark.network.timeout",
  "default" : "120s",
  "description" : "Default timeout for all network interactions. This config will be used in place of spark.core.connection.ack.wait.timeout, spark.storage.blockManagerSlaveTimeoutMs, spark.shuffle.io.connectionTimeout, spark.rpc.askTimeout or spark.rpc.lookupTimeout if they are not configured."
}, {
  "setting" : "spark.port.maxRetries",
  "default" : "16",
  "description" : "Maximum number of retries when binding to a port before giving up. When a port is given a specific value (non 0), each subsequent retry will increment the port used in the previous attempt by 1 before retrying. This essentially allows it to try a range of ports from the start port specified to port + maxRetries."
}, {
  "setting" : "spark.rpc.numRetries",
  "default" : "3",
  "description" : "Number of times to retry before an RPC task gives up. An RPC task will run at most times of this number."
}, {
  "setting" : "spark.rpc.retry.wait",
  "default" : "3s",
  "description" : "Duration for an RPC ask operation to wait before retrying."
}, {
  "setting" : "spark.rpc.askTimeout",
  "default" : null,
  "description" : "Duration for an RPC ask operation to wait before timing out."
}, {
  "setting" : "spark.rpc.lookupTimeout",
  "default" : "120s",
  "description" : "Duration for an RPC remote endpoint lookup operation to wait before timing out."
}, {
  "setting" : "spark.cores.max",
  "default" : null,
  "description" : "When running on a standalone deploy cluster or a Mesos cluster in \"coarse-grained\" sharing mode, the maximum amount of CPU cores to request for the application from across the cluster (not from each machine). If not set, the default will be spark.deploy.defaultCores on Spark's standalone cluster manager, or infinite (all available cores) on Mesos."
}, {
  "setting" : "spark.locality.wait",
  "default" : "3s",
  "description" : "How long to wait to launch a data-local task before giving up and launching it on a less-local node. The same wait will be used to step through multiple locality levels (process-local, node-local, rack-local and then any). It is also possible to customize the waiting time for each level by setting spark.locality.wait.node, etc. You should increase this setting if your tasks are long and see poor locality, but the default usually works well."
}, {
  "setting" : "spark.locality.wait.node",
  "default" : null,
  "description" : "Customize the locality wait for node locality. For example, you can set this to 0 to skip node locality and search immediately for rack locality (if your cluster has rack information)."
}, {
  "setting" : "spark.locality.wait.process",
  "default" : null,
  "description" : "Customize the locality wait for process locality. This affects tasks that attempt to access cached data in a particular executor process."
}, {
  "setting" : "spark.locality.wait.rack",
  "default" : null,
  "description" : "Customize the locality wait for rack locality."
}, {
  "setting" : "spark.scheduler.maxRegisteredResourcesWaitingTime",
  "default" : "30s",
  "description" : "Maximum amount of time to wait for resources to register before scheduling begins."
}, {
  "setting" : "spark.scheduler.minRegisteredResourcesRatio",
  "default" : null,
  "description" : "The minimum ratio of registered resources (registered resources / total expected resources) (resources are executors in yarn mode, CPU cores in standalone mode and Mesos coarsed-grained mode ['spark.cores.max' value is total expected resources for Mesos coarse-grained mode] ) to wait for before scheduling begins. Specified as a double between 0.0 and 1.0. Regardless of whether the minimum ratio of resources has been reached, the maximum amount of time it will wait before scheduling begins is controlled by config spark.scheduler.maxRegisteredResourcesWaitingTime."
}, {
  "setting" : "spark.scheduler.mode",
  "default" : "FIFO",
  "description" : "The scheduling mode between jobs submitted to the same SparkContext. Can be set to FAIR to use fair sharing instead of queueing jobs one after another. Useful for multi-user services."
}, {
  "setting" : "spark.scheduler.revive.interval",
  "default" : "1s",
  "description" : "The interval length for the scheduler to revive the worker resource offers to run tasks."
}, {
  "setting" : "spark.blacklist.enabled",
  "default" : "false",
  "description" : "If set to \"true\", prevent Spark from scheduling tasks on executors that have been blacklisted due to too many task failures. The blacklisting algorithm can be further controlled by the other \"spark.blacklist\" configuration options."
}, {
  "setting" : "spark.blacklist.timeout",
  "default" : "1h",
  "description" : "(Experimental) How long a node or executor is blacklisted for the entire application, before it is unconditionally removed from the blacklist to attempt running new tasks."
}, {
  "setting" : "spark.blacklist.task.maxTaskAttemptsPerExecutor",
  "default" : "1",
  "description" : "(Experimental) For a given task, how many times it can be retried on one executor before the executor is blacklisted for that task."
}, {
  "setting" : "spark.blacklist.task.maxTaskAttemptsPerNode",
  "default" : "2",
  "description" : "(Experimental) For a given task, how many times it can be retried on one node, before the entire node is blacklisted for that task."
}, {
  "setting" : "spark.blacklist.stage.maxFailedTasksPerExecutor",
  "default" : "2",
  "description" : "(Experimental) How many different tasks must fail on one executor, within one stage, before the executor is blacklisted for that stage."
}, {
  "setting" : "spark.blacklist.stage.maxFailedExecutorsPerNode",
  "default" : "2",
  "description" : "(Experimental) How many different executors are marked as blacklisted for a given stage, before the entire node is marked as failed for the stage."
}, {
  "setting" : "spark.blacklist.application.maxFailedTasksPerExecutor",
  "default" : "2",
  "description" : "(Experimental) How many different tasks must fail on one executor, in successful task sets, before the executor is blacklisted for the entire application. Blacklisted executors will be automatically added back to the pool of available resources after the timeout specified by spark.blacklist.timeout. Note that with dynamic allocation, though, the executors may get marked as idle and be reclaimed by the cluster manager."
}, {
  "setting" : "spark.blacklist.application.maxFailedExecutorsPerNode",
  "default" : "2",
  "description" : "(Experimental) How many different executors must be blacklisted for the entire application, before the node is blacklisted for the entire application. Blacklisted nodes will be automatically added back to the pool of available resources after the timeout specified by spark.blacklist.timeout. Note that with dynamic allocation, though, the executors on the node may get marked as idle and be reclaimed by the cluster manager."
}, {
  "setting" : "spark.blacklist.killBlacklistedExecutors",
  "default" : "false",
  "description" : "(Experimental) If set to \"true\", allow Spark to automatically kill, and attempt to re-create, executors when they are blacklisted. Note that, when an entire node is added to the blacklist, all of the executors on that node will be killed."
}, {
  "setting" : "spark.speculation",
  "default" : "false",
  "description" : "If set to \"true\", performs speculative execution of tasks. This means if one or more tasks are running slowly in a stage, they will be re-launched."
}, {
  "setting" : "spark.speculation.interval",
  "default" : "100ms",
  "description" : "How often Spark will check for tasks to speculate."
}, {
  "setting" : "spark.speculation.multiplier",
  "default" : "1.5",
  "description" : "How many times slower a task is than the median to be considered for speculation."
}, {
  "setting" : "spark.speculation.quantile",
  "default" : "0.75",
  "description" : "Fraction of tasks which must be complete before speculation is enabled for a particular stage."
}, {
  "setting" : "spark.task.cpus",
  "default" : "1",
  "description" : "Number of cores to allocate for each task."
}, {
  "setting" : "spark.task.maxFailures",
  "default" : "4",
  "description" : "Number of failures of any particular task before giving up on the job. The total number of failures spread across different tasks will not cause the job to fail; a particular task has to fail this number of attempts. Should be greater than or equal to 1. Number of allowed retries = this value - 1."
}, {
  "setting" : "spark.task.reaper.enabled",
  "default" : "false",
  "description" : "Enables monitoring of killed / interrupted tasks. When set to true, any task which is killed will be monitored by the executor until that task actually finishes executing. See the other spark.task.reaper.* configurations for details on how to control the exact behavior of this monitoring. When set to false (the default), task killing will use an older code path which lacks such monitoring."
}, {
  "setting" : "spark.task.reaper.pollingInterval",
  "default" : "10s",
  "description" : "When spark.task.reaper.enabled = true, this setting controls the frequency at which executors will poll the status of killed tasks. If a killed task is still running when polled then a warning will be logged and, by default, a thread-dump of the task will be logged (this thread dump can be disabled via the spark.task.reaper.threadDump setting, which is documented below)."
}, {
  "setting" : "spark.task.reaper.threadDump",
  "default" : "true",
  "description" : "When spark.task.reaper.enabled = true, this setting controls whether task thread dumps are logged during periodic polling of killed tasks. Set this to false to disable collection of thread dumps."
}, {
  "setting" : "spark.task.reaper.killTimeout",
  "default" : "-1",
  "description" : "When spark.task.reaper.enabled = true, this setting specifies a timeout after which the executor JVM will kill itself if a killed task has not stopped running. The default value, -1, disables this mechanism and prevents the executor from self-destructing. The purpose of this setting is to act as a safety-net to prevent runaway uncancellable tasks from rendering an executor unusable."
}, {
  "setting" : "spark.stage.maxConsecutiveAttempts",
  "default" : "4",
  "description" : "Number of consecutive stage attempts allowed before a stage is aborted."
}, {
  "setting" : "spark.dynamicAllocation.enabled",
  "default" : "false",
  "description" : "Whether to use dynamic resource allocation, which scales the number of executors registered with this application up and down based on the workload. For more detail, see the description here. This requires spark.shuffle.service.enabled to be set. The following configurations are also relevant: spark.dynamicAllocation.minExecutors, spark.dynamicAllocation.maxExecutors, and spark.dynamicAllocation.initialExecutors"
}, {
  "setting" : "spark.dynamicAllocation.executorIdleTimeout",
  "default" : "60s",
  "description" : "If dynamic allocation is enabled and an executor has been idle for more than this duration, the executor will be removed. For more detail, see this description."
}, {
  "setting" : "spark.dynamicAllocation.cachedExecutorIdleTimeout",
  "default" : null,
  "description" : "If dynamic allocation is enabled and an executor which has cached data blocks has been idle for more than this duration, the executor will be removed. For more details, see this description."
}, {
  "setting" : "spark.dynamicAllocation.initialExecutors",
  "default" : null,
  "description" : "Initial number of executors to run if dynamic allocation is enabled. If `--num-executors` (or `spark.executor.instances`) is set and larger than this value, it will be used as the initial number of executors."
}, {
  "setting" : "spark.dynamicAllocation.maxExecutors",
  "default" : null,
  "description" : "Upper bound for the number of executors if dynamic allocation is enabled."
}, {
  "setting" : "spark.dynamicAllocation.minExecutors",
  "default" : "0",
  "description" : "Lower bound for the number of executors if dynamic allocation is enabled."
}, {
  "setting" : "spark.dynamicAllocation.schedulerBacklogTimeout",
  "default" : "1s",
  "description" : "If dynamic allocation is enabled and there have been pending tasks backlogged for more than this duration, new executors will be requested. For more detail, see this description."
}, {
  "setting" : "spark.dynamicAllocation.sustainedSchedulerBacklogTimeout",
  "default" : null,
  "description" : "Same as spark.dynamicAllocation.schedulerBacklogTimeout, but used only for subsequent executor requests. For more detail, see this description."
}, {
  "setting" : "spark.acls.enable",
  "default" : "false",
  "description" : "Whether Spark acls should be enabled. If enabled, this checks to see if the user has access permissions to view or modify the job. Note this requires the user to be known, so if the user comes across as null no checks are done. Filters can be used with the UI to authenticate and set the user."
}, {
  "setting" : "spark.admin.acls",
  "default" : null,
  "description" : "Comma separated list of users/administrators that have view and modify access to all Spark jobs. This can be used if you run on a shared cluster and have a set of administrators or devs who help debug when things do not work. Putting a \"*\" in the list means any user can have the privilege of admin."
}, {
  "setting" : "spark.admin.acls.groups",
  "default" : null,
  "description" : "Comma separated list of groups that have view and modify access to all Spark jobs. This can be used if you have a set of administrators or developers who help maintain and debug the underlying infrastructure. Putting a \"*\" in the list means any user in any group can have the privilege of admin. The user groups are obtained from the instance of the groups mapping provider specified by spark.user.groups.mapping. Check the entry spark.user.groups.mapping for more details."
}, {
  "setting" : "spark.user.groups.mapping",
  "default" : "org.apache.spark.security.ShellBasedGroupsMappingProvider",
  "description" : "The list of groups for a user are determined by a group mapping service defined by the trait org.apache.spark.security.GroupMappingServiceProvider which can configured by this property. A default unix shell based implementation is provided org.apache.spark.security.ShellBasedGroupsMappingProvider which can be specified to resolve a list of groups for a user. Note: This implementation supports only a Unix/Linux based environment. Windows environment is currently not supported. However, a new platform/protocol can be supported by implementing the trait org.apache.spark.security.GroupMappingServiceProvider."
}, {
  "setting" : "spark.authenticate",
  "default" : "false",
  "description" : "Whether Spark authenticates its internal connections. See spark.authenticate.secret if not running on YARN."
}, {
  "setting" : "spark.authenticate.secret",
  "default" : null,
  "description" : "Set the secret key used for Spark to authenticate between components. This needs to be set if not running on YARN and authentication is enabled."
}, {
  "setting" : "spark.network.crypto.enabled",
  "default" : "false",
  "description" : "Enable encryption using the commons-crypto library for RPC and block transfer service. Requires spark.authenticate to be enabled."
}, {
  "setting" : "spark.network.crypto.keyLength",
  "default" : "128",
  "description" : "The length in bits of the encryption key to generate. Valid values are 128, 192 and 256."
}, {
  "setting" : "spark.network.crypto.keyFactoryAlgorithm",
  "default" : "PBKDF2WithHmacSHA1",
  "description" : "The key factory algorithm to use when generating encryption keys. Should be one of the algorithms supported by the javax.crypto.SecretKeyFactory class in the JRE being used."
}, {
  "setting" : "spark.network.crypto.saslFallback",
  "default" : "true",
  "description" : "Whether to fall back to SASL authentication if authentication fails using Spark's internal mechanism. This is useful when the application is connecting to old shuffle services that do not support the internal Spark authentication protocol. On the server side, this can be used to block older clients from authenticating against a new shuffle service."
}, {
  "setting" : "spark.network.crypto.config.*",
  "default" : null,
  "description" : "Configuration values for the commons-crypto library, such as which cipher implementations to use. The config name should be the name of commons-crypto configuration without the \"commons.crypto\" prefix."
}, {
  "setting" : "spark.authenticate.enableSaslEncryption",
  "default" : "false",
  "description" : "Enable encrypted communication when authentication is enabled. This is supported by the block transfer service and the RPC endpoints."
}, {
  "setting" : "spark.network.sasl.serverAlwaysEncrypt",
  "default" : "false",
  "description" : "Disable unencrypted connections for services that support SASL authentication."
}, {
  "setting" : "spark.core.connection.ack.wait.timeout",
  "default" : null,
  "description" : "How long for the connection to wait for ack to occur before timing out and giving up. To avoid unwilling timeout caused by long pause like GC, you can set larger value."
}, {
  "setting" : "spark.modify.acls",
  "default" : null,
  "description" : "Comma separated list of users that have modify access to the Spark job. By default only the user that started the Spark job has access to modify it (kill it for example). Putting a \"*\" in the list means any user can have access to modify it."
}, {
  "setting" : "spark.modify.acls.groups",
  "default" : null,
  "description" : "Comma separated list of groups that have modify access to the Spark job. This can be used if you have a set of administrators or developers from the same team to have access to control the job. Putting a \"*\" in the list means any user in any group has the access to modify the Spark job. The user groups are obtained from the instance of the groups mapping provider specified by spark.user.groups.mapping. Check the entry spark.user.groups.mapping for more details."
}, {
  "setting" : "spark.ui.filters",
  "default" : null,
  "description" : "Comma separated list of filter class names to apply to the Spark web UI. The filter should be a standard javax servlet Filter. Parameters to each filter can also be specified by setting a java system property of: spark.<class name of filter>.params='param1=value1,param2=value2' For example: -Dspark.ui.filters=com.test.filter1-Dspark.com.test.filter1.params='param1=foo,param2=testing'"
}, {
  "setting" : "spark.ui.view.acls",
  "default" : null,
  "description" : "Comma separated list of users that have view access to the Spark web ui. By default only the user that started the Spark job has view access. Putting a \"*\" in the list means any user can have view access to this Spark job."
}, {
  "setting" : "spark.ui.view.acls.groups",
  "default" : null,
  "description" : "Comma separated list of groups that have view access to the Spark web ui to view the Spark Job details. This can be used if you have a set of administrators or developers or users who can monitor the Spark job submitted. Putting a \"*\" in the list means any user in any group can view the Spark job details on the Spark web ui. The user groups are obtained from the instance of the groups mapping provider specified by spark.user.groups.mapping. Check the entry spark.user.groups.mapping for more details."
}, {
  "setting" : "spark.ssl.enabled",
  "default" : "false",
  "description" : "Whether to enable SSL connections on all supported protocols. When spark.ssl.enabled is configured, spark.ssl.protocol is required. All the SSL settings like spark.ssl.xxx where xxx is a particular configuration property, denote the global configuration for all the supported protocols. In order to override the global configuration for the particular protocol, the properties must be overwritten in the protocol-specific namespace. Use spark.ssl.YYY.XXX settings to overwrite the global configuration for particular protocol denoted by YYY. Example values for YYY include fs, ui, standalone, and historyServer. See SSL Configuration for details on hierarchical SSL configuration for services."
}, {
  "setting" : "spark.ssl.[namespace].port",
  "default" : null,
  "description" : "The port where the SSL service will listen on. The port must be defined within a namespace configuration; see SSL Configuration for the available namespaces. When not set, the SSL port will be derived from the non-SSL port for the same service. A value of \"0\" will make the service bind to an ephemeral port."
}, {
  "setting" : "spark.ssl.enabledAlgorithms",
  "default" : null,
  "description" : "A comma separated list of ciphers. The specified ciphers must be supported by JVM. The reference list of protocols one can find on this page. Note: If not set, it will use the default cipher suites of JVM."
}, {
  "setting" : "spark.ssl.keyPassword",
  "default" : null,
  "description" : "A password to the private key in key-store."
}, {
  "setting" : "spark.ssl.keyStore",
  "default" : null,
  "description" : "A path to a key-store file. The path can be absolute or relative to the directory where the component is started in."
}, {
  "setting" : "spark.ssl.keyStorePassword",
  "default" : null,
  "description" : "A password to the key-store."
}, {
  "setting" : "spark.ssl.keyStoreType",
  "default" : "JKS",
  "description" : "The type of the key-store."
}, {
  "setting" : "spark.ssl.protocol",
  "default" : null,
  "description" : "A protocol name. The protocol must be supported by JVM. The reference list of protocols one can find on this page."
}, {
  "setting" : "spark.ssl.needClientAuth",
  "default" : "false",
  "description" : "Set true if SSL needs client authentication."
}, {
  "setting" : "spark.ssl.trustStore",
  "default" : null,
  "description" : "A path to a trust-store file. The path can be absolute or relative to the directory where the component is started in."
}, {
  "setting" : "spark.ssl.trustStorePassword",
  "default" : null,
  "description" : "A password to the trust-store."
}, {
  "setting" : "spark.ssl.trustStoreType",
  "default" : "JKS",
  "description" : "The type of the trust-store."
}, {
  "setting" : "spark.streaming.backpressure.enabled",
  "default" : "false",
  "description" : "Enables or disables Spark Streaming's internal backpressure mechanism (since 1.5). This enables the Spark Streaming to control the receiving rate based on the current batch scheduling delays and processing times so that the system receives only as fast as the system can process. Internally, this dynamically sets the maximum receiving rate of receivers. This rate is upper bounded by the values spark.streaming.receiver.maxRate and spark.streaming.kafka.maxRatePerPartition if they are set (see below)."
}, {
  "setting" : "spark.streaming.backpressure.initialRate",
  "default" : null,
  "description" : "This is the initial maximum receiving rate at which each receiver will receive data for the first batch when the backpressure mechanism is enabled."
}, {
  "setting" : "spark.streaming.blockInterval",
  "default" : "200ms",
  "description" : "Interval at which data received by Spark Streaming receivers is chunked into blocks of data before storing them in Spark. Minimum recommended - 50 ms. See the performance tuning section in the Spark Streaming programing guide for more details."
}, {
  "setting" : "spark.streaming.receiver.maxRate",
  "default" : null,
  "description" : "Maximum rate (number of records per second) at which each receiver will receive data. Effectively, each stream will consume at most this number of records per second. Setting this configuration to 0 or a negative number will put no limit on the rate. See the deployment guide in the Spark Streaming programing guide for mode details."
}, {
  "setting" : "spark.streaming.receiver.writeAheadLog.enable",
  "default" : "false",
  "description" : "Enable write ahead logs for receivers. All the input data received through receivers will be saved to write ahead logs that will allow it to be recovered after driver failures. See the deployment guide in the Spark Streaming programing guide for more details."
}, {
  "setting" : "spark.streaming.unpersist",
  "default" : "true",
  "description" : "Force RDDs generated and persisted by Spark Streaming to be automatically unpersisted from Spark's memory. The raw input data received by Spark Streaming is also automatically cleared. Setting this to false will allow the raw data and persisted RDDs to be accessible outside the streaming application as they will not be cleared automatically. But it comes at the cost of higher memory usage in Spark."
}, {
  "setting" : "spark.streaming.stopGracefullyOnShutdown",
  "default" : "false",
  "description" : "If true, Spark shuts down the StreamingContext gracefully on JVM shutdown rather than immediately."
}, {
  "setting" : "spark.streaming.kafka.maxRatePerPartition",
  "default" : null,
  "description" : "Maximum rate (number of records per second) at which data will be read from each Kafka partition when using the new Kafka direct stream API. See the Kafka Integration guide for more details."
}, {
  "setting" : "spark.streaming.kafka.maxRetries",
  "default" : "1",
  "description" : "Maximum number of consecutive retries the driver will make in order to find the latest offsets on the leader of each partition (a default value of 1 means that the driver will make a maximum of 2 attempts). Only applies to the new Kafka direct stream API."
}, {
  "setting" : "spark.streaming.ui.retainedBatches",
  "default" : "1000",
  "description" : "How many batches the Spark Streaming UI and status APIs remember before garbage collecting."
}, {
  "setting" : "spark.streaming.driver.writeAheadLog.closeFileAfterWrite",
  "default" : "false",
  "description" : "Whether to close the file after writing a write ahead log record on the driver. Set this to 'true' when you want to use S3 (or any file system that does not support flushing) for the metadata WAL on the driver."
}, {
  "setting" : "spark.streaming.receiver.writeAheadLog.closeFileAfterWrite",
  "default" : "false",
  "description" : "Whether to close the file after writing a write ahead log record on the receivers. Set this to 'true' when you want to use S3 (or any file system that does not support flushing) for the data WAL on the receivers."
}, {
  "setting" : "spark.r.numRBackendThreads",
  "default" : "2",
  "description" : "Number of threads used by RBackend to handle RPC calls from SparkR package."
}, {
  "setting" : "spark.r.command",
  "default" : "Rscript",
  "description" : "Executable for executing R scripts in cluster modes for both driver and workers."
}, {
  "setting" : "spark.r.driver.command",
  "default" : null,
  "description" : "Executable for executing R scripts in client modes for driver. Ignored in cluster modes."
}, {
  "setting" : "spark.r.shell.command",
  "default" : "R",
  "description" : "Executable for executing sparkR shell in client modes for driver. Ignored in cluster modes. It is the same as environment variable SPARKR_DRIVER_R, but take precedence over it. spark.r.shell.command is used for sparkR shell while spark.r.driver.command is used for running R script."
}, {
  "setting" : "spark.r.backendConnectionTimeout",
  "default" : "6000",
  "description" : "Connection timeout set by R process on its connection to RBackend in seconds."
}, {
  "setting" : "spark.r.heartBeatInterval",
  "default" : "100",
  "description" : "Interval for heartbeats sent from SparkR backend to R process to prevent connection timeout."
}, {
  "setting" : "spark.graphx.pregel.checkpointInterval",
  "default" : "-1",
  "description" : "Checkpoint interval for graph and message in Pregel. It used to avoid stackOverflowError due to long lineage chains after lots of iterations. The checkpoint is disabled by default."
}, {
  "setting" : "spark.deploy.recoveryMode",
  "default" : "NONE",
  "description" : "The recovery mode setting to recover submitted Spark jobs with cluster mode when it failed and relaunches. This is only applicable for cluster mode when running with Standalone or Mesos."
}, {
  "setting" : "spark.deploy.zookeeper.url",
  "default" : null,
  "description" : "When `spark.deploy.recoveryMode` is set to ZOOKEEPER, this configuration is used to set the zookeeper URL to connect to."
}, {
  "setting" : "spark.deploy.zookeeper.dir",
  "default" : null,
  "description" : "When `spark.deploy.recoveryMode` is set to ZOOKEEPER, this configuration is used to set the zookeeper directory to store recovery state."
}, {
  "setting" : "spark.yarn.am.memory",
  "default" : "512m",
  "description" : "Amount of memory to use for the YARN Application Master in client mode, in the same format as JVM memory strings (e.g. 512m, 2g). In cluster mode, use spark.driver.memory instead. Use lower-case suffixes, e.g. k, m, g, t, and p, for kibi-, mebi-, gibi-, tebi-, and pebibytes, respectively."
}, {
  "setting" : "spark.yarn.am.cores",
  "default" : "1",
  "description" : "Number of cores to use for the YARN Application Master in client mode. In cluster mode, use spark.driver.cores instead."
}, {
  "setting" : "spark.yarn.am.waitTime",
  "default" : "100s",
  "description" : "In cluster mode, time for the YARN Application Master to wait for the SparkContext to be initialized. In client mode, time for the YARN Application Master to wait for the driver to connect to it."
}, {
  "setting" : "spark.yarn.submit.file.replication",
  "default" : null,
  "description" : "HDFS replication level for the files uploaded into HDFS for the application. These include things like the Spark jar, the app jar, and any distributed cache files/archives."
}, {
  "setting" : "spark.yarn.stagingDir",
  "default" : null,
  "description" : "Staging directory used while submitting applications."
}, {
  "setting" : "spark.yarn.preserve.staging.files",
  "default" : "false",
  "description" : "Set to true to preserve the staged files (Spark jar, app jar, distributed cache files) at the end of the job rather than delete them."
}, {
  "setting" : "spark.yarn.scheduler.heartbeat.interval-ms",
  "default" : "3000",
  "description" : "The interval in ms in which the Spark application master heartbeats into the YARN ResourceManager. The value is capped at half the value of YARN's configuration for the expiry interval, i.e. yarn.am.liveness-monitor.expiry-interval-ms."
}, {
  "setting" : "spark.yarn.scheduler.initial-allocation.interval",
  "default" : "200ms",
  "description" : "The initial interval in which the Spark application master eagerly heartbeats to the YARN ResourceManager when there are pending container allocation requests. It should be no larger than spark.yarn.scheduler.heartbeat.interval-ms. The allocation interval will doubled on successive eager heartbeats if pending containers still exist, until spark.yarn.scheduler.heartbeat.interval-ms is reached."
}, {
  "setting" : "spark.yarn.max.executor.failures",
  "default" : null,
  "description" : "The maximum number of executor failures before failing the application."
}, {
  "setting" : "spark.yarn.historyServer.address",
  "default" : null,
  "description" : "The address of the Spark history server, e.g. host.com:18080. The address should not contain a scheme (http://). Defaults to not being set since the history server is an optional service. This address is given to the YARN ResourceManager when the Spark application finishes to link the application from the ResourceManager UI to the Spark history server UI. For this property, YARN properties can be used as variables, and these are substituted by Spark at runtime. For example, if the Spark history server runs on the same node as the YARN ResourceManager, it can be set to ${hadoopconf-yarn.resourcemanager.hostname}:18080."
}, {
  "setting" : "spark.yarn.dist.archives",
  "default" : null,
  "description" : "Comma separated list of archives to be extracted into the working directory of each executor."
}, {
  "setting" : "spark.yarn.dist.files",
  "default" : null,
  "description" : "Comma-separated list of files to be placed in the working directory of each executor."
}, {
  "setting" : "spark.yarn.dist.jars",
  "default" : null,
  "description" : "Comma-separated list of jars to be placed in the working directory of each executor."
}, {
  "setting" : "spark.executor.instances",
  "default" : "2",
  "description" : "The number of executors for static allocation. With spark.dynamicAllocation.enabled, the initial set of executors will be at least this large."
}, {
  "setting" : "spark.yarn.executor.memoryOverhead",
  "default" : null,
  "description" : "The amount of off-heap memory (in megabytes) to be allocated per executor. This is memory that accounts for things like VM overheads, interned strings, other native overheads, etc. This tends to grow with the executor size (typically 6-10%)."
}, {
  "setting" : "spark.yarn.driver.memoryOverhead",
  "default" : null,
  "description" : "The amount of off-heap memory (in megabytes) to be allocated per driver in cluster mode. This is memory that accounts for things like VM overheads, interned strings, other native overheads, etc. This tends to grow with the container size (typically 6-10%)."
}, {
  "setting" : "spark.yarn.am.memoryOverhead",
  "default" : null,
  "description" : "Same as spark.yarn.driver.memoryOverhead, but for the YARN Application Master in client mode."
}, {
  "setting" : "spark.yarn.am.port",
  "default" : null,
  "description" : "Port for the YARN Application Master to listen on. In YARN client mode, this is used to communicate between the Spark driver running on a gateway and the YARN Application Master running on YARN. In YARN cluster mode, this is used for the dynamic executor feature, where it handles the kill from the scheduler backend."
}, {
  "setting" : "spark.yarn.queue",
  "default" : "default",
  "description" : "The name of the YARN queue to which the application is submitted."
}, {
  "setting" : "spark.yarn.jars",
  "default" : null,
  "description" : "List of libraries containing Spark code to distribute to YARN containers. By default, Spark on YARN will use Spark jars installed locally, but the Spark jars can also be in a world-readable location on HDFS. This allows YARN to cache it on nodes so that it doesn't need to be distributed each time an application runs. To point to jars on HDFS, for example, set this configuration to hdfs:///some/path. Globs are allowed."
}, {
  "setting" : "spark.yarn.archive",
  "default" : null,
  "description" : "An archive containing needed Spark jars for distribution to the YARN cache. If set, this configuration replaces spark.yarn.jars and the archive is used in all the application's containers. The archive should contain jar files in its root directory. Like with the previous option, the archive can also be hosted on HDFS to speed up file distribution."
}, {
  "setting" : "spark.yarn.access.hadoopFileSystems",
  "default" : null,
  "description" : "A comma-separated list of secure Hadoop filesystems your Spark application is going to access. For example, spark.yarn.access.hadoopFileSystems=hdfs://nn1.com:8032,hdfs://nn2.com:8032, webhdfs://nn3.com:50070. The Spark application must have access to the filesystems listed and Kerberos must be properly configured to be able to access them (either in the same realm or in a trusted realm). Spark acquires security tokens for each of the filesystems so that the Spark application can access those remote Hadoop filesystems. spark.yarn.access.namenodes is deprecated, please use this instead."
}, {
  "setting" : "spark.yarn.appMasterEnv.[EnvironmentVariableName]",
  "default" : null,
  "description" : "Add the environment variable specified by EnvironmentVariableName to the Application Master process launched on YARN. The user can specify multiple of these and to set multiple environment variables. In cluster mode this controls the environment of the Spark driver and in client mode it only controls the environment of the executor launcher."
}, {
  "setting" : "spark.yarn.containerLauncherMaxThreads",
  "default" : "25",
  "description" : "The maximum number of threads to use in the YARN Application Master for launching executor containers."
}, {
  "setting" : "spark.yarn.am.extraJavaOptions",
  "default" : null,
  "description" : "A string of extra JVM options to pass to the YARN Application Master in client mode. In cluster mode, use spark.driver.extraJavaOptions instead. Note that it is illegal to set maximum heap size (-Xmx) settings with this option. Maximum heap size settings can be set with spark.yarn.am.memory"
}, {
  "setting" : "spark.yarn.am.extraLibraryPath",
  "default" : null,
  "description" : "Set a special library path to use when launching the YARN Application Master in client mode."
}, {
  "setting" : "spark.yarn.maxAppAttempts",
  "default" : null,
  "description" : "The maximum number of attempts that will be made to submit the application. It should be no larger than the global number of max attempts in the YARN configuration."
}, {
  "setting" : "spark.yarn.am.attemptFailuresValidityInterval",
  "default" : null,
  "description" : "Defines the validity interval for AM failure tracking. If the AM has been running for at least the defined interval, the AM failure count will be reset. This feature is not enabled if not configured."
}, {
  "setting" : "spark.yarn.executor.failuresValidityInterval",
  "default" : null,
  "description" : "Defines the validity interval for executor failure tracking. Executor failures which are older than the validity interval will be ignored."
}, {
  "setting" : "spark.yarn.submit.waitAppCompletion",
  "default" : "true",
  "description" : "In YARN cluster mode, controls whether the client waits to exit until the application completes. If set to true, the client process will stay alive reporting the application's status. Otherwise, the client process will exit after submission."
}, {
  "setting" : "spark.yarn.am.nodeLabelExpression",
  "default" : null,
  "description" : "A YARN node label expression that restricts the set of nodes AM will be scheduled on. Only versions of YARN greater than or equal to 2.6 support node label expressions, so when running against earlier versions, this property will be ignored."
}, {
  "setting" : "spark.yarn.executor.nodeLabelExpression",
  "default" : null,
  "description" : "A YARN node label expression that restricts the set of nodes executors will be scheduled on. Only versions of YARN greater than or equal to 2.6 support node label expressions, so when running against earlier versions, this property will be ignored."
}, {
  "setting" : "spark.yarn.tags",
  "default" : null,
  "description" : "Comma-separated list of strings to pass through as YARN application tags appearing in YARN ApplicationReports, which can be used for filtering when querying YARN apps."
}, {
  "setting" : "spark.yarn.keytab",
  "default" : null,
  "description" : "The full path to the file that contains the keytab for the principal specified above. This keytab will be copied to the node running the YARN Application Master via the Secure Distributed Cache, for renewing the login tickets and the delegation tokens periodically. (Works also with the \"local\" master)"
}, {
  "setting" : "spark.yarn.principal",
  "default" : null,
  "description" : "Principal to be used to login to KDC, while running on secure HDFS. (Works also with the \"local\" master)"
}, {
  "setting" : "spark.yarn.config.gatewayPath",
  "default" : null,
  "description" : "A path that is valid on the gateway host (the host where a Spark application is started) but may differ for paths for the same resource in other nodes in the cluster. Coupled with spark.yarn.config.replacementPath, this is used to support clusters with heterogeneous configurations, so that Spark can correctly launch remote processes. The replacement path normally will contain a reference to some environment variable exported by YARN (and, thus, visible to Spark containers). For example, if the gateway node has Hadoop libraries installed on /disk1/hadoop, and the location of the Hadoop install is exported by YARN as the HADOOP_HOME environment variable, setting this value to /disk1/hadoop and the replacement path to $HADOOP_HOME will make sure that paths used to launch remote processes properly reference the local YARN configuration."
}, {
  "setting" : "spark.yarn.config.replacementPath",
  "default" : null,
  "description" : "See spark.yarn.config.gatewayPath."
}, {
  "setting" : "spark.yarn.security.credentials.${service}.enabled",
  "default" : "true",
  "description" : "Controls whether to obtain credentials for services when security is enabled. By default, credentials for all supported services are retrieved when those services are configured, but it's possible to disable that behavior if it somehow conflicts with the application being run. For further details please see [Running in a Secure Cluster](running-on-yarn.html#running-in-a-secure-cluster)"
}, {
  "setting" : "spark.yarn.rolledLog.includePattern",
  "default" : null,
  "description" : "Java Regex to filter the log files which match the defined include pattern and those log files will be aggregated in a rolling fashion. This will be used with YARN's rolling log aggregation, to enable this feature in YARN side yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds should be configured in yarn-site.xml. This feature can only be used with Hadoop 2.6.4+. The Spark log4j appender needs be changed to use FileAppender or another appender that can handle the files being removed while its running. Based on the file name configured in the log4j configuration (like spark.log), the user should set the regex (spark*) to include all the log files that need to be aggregated."
}, {
  "setting" : "spark.yarn.rolledLog.excludePattern",
  "default" : null,
  "description" : "Java Regex to filter the log files which match the defined exclude pattern and those log files will not be aggregated in a rolling fashion. If the log file name matches both the include and the exclude pattern, this file will be excluded eventually."
}, {
  "setting" : "spark.yarn.shuffle.stopOnFailure",
  "default" : "false",
  "description" : "Whether to stop the NodeManager when there's a failure in the Spark Shuffle Service's initialization. This prevents application failures caused by running containers on NodeManagers where the Spark Shuffle Service is not running."
} ]