#!/bin/bash
#
# Refresh AWS instance metadata for a cluster.
#

get_abs_script_dir() {
  pushd . >/dev/null
  cd "$(dirname $0)"
  local abs_script_dir="$(pwd)"
  popd  >/dev/null
  echo "${abs_script_dir}"
}
SCRIPT_DIR="$(get_abs_script_dir)"

source "${SCRIPT_DIR}/common/common-argparse.sh"

mkdir -p "$METADIR"

# ##############################
# Create json documents for all, cluster and manager instances
# ##############################

filter_by_tag() {
  local key=$1
  local value=$2
 
  if [ -z "$key" ] || [ -z "$value" ] ; then
	echo "Called filter_by_tag without specifying both key and value: $1 $2"
	exit 1
  fi

  jq "select(.Tags | map(select(.Key == \"${key}\"))[0].Value == \"${value}\")"
}

get_tag_value() {
  local key=$1
 
  if [ -z "$key" ] ; then
	echo "Called get_tag_value without specifying key"
	exit 1
  fi

  jq "select(.Tags | map(select(.Key == \"${key}\"))[0].Value == \"${value}\")"
}

filter_by_managed_cluster() {
  local key="Managed-Clusters"
  local cluster="$1"  

  # first line only filters for presence of "Managed-Clusters" tag
  # second line parses the "Managed-Clusters" tag value into a JSON array and checks for presence of $cluster
  jq "select(.Tags | map(select(.Key == \"${key}\")) | length > 0) \
    | select (.Tags | map(select(.Key == \"${key}\"))[0].Value | split(\" \") | map(select(. == \"${cluster}\")) | length > 0 )"
}


if ! aws ec2 describe-instances --dry-run 2>&1 | grep -q DryRunOperation ; then 
	echo "Error: Either youy AWS credentials are not configured (try: aws configure) or you do not have the necessary AWS permission to do describeInstances."
	exit 1
fi

echo "Requesting instance metadata from aws"
aws ec2 describe-instances --output json | jq ".Reservations[].Instances[]" | filter_by_tag "Owner" "${COWNER}" >"${ALL_JSON}"

# filter for Cluster-Env
cat "${ALL_JSON}"     | filter_by_tag "Cluster-Env" "${CENV}" >"${ENV_JSON}"

# filter for Cluster-Name
cat "${ENV_JSON}"     | filter_by_tag "Cluster-Name" "${CNAME}" >"${CLUSTER_JSON}"

# filter for Cluster-Role
cat "${ENV_JSON}" | filter_by_tag "Cluster-Role" "manager" | filter_by_managed_cluster "${CNAME}" >"${MANAGER_JSON}"
cat "${CLUSTER_JSON}" | filter_by_tag "Cluster-Role" "master" >"${MASTER_JSON}"
cat "${CLUSTER_JSON}" | filter_by_tag "Cluster-Role" "worker" >"${WORKER_JSON}"

echo "Refreshed cluster metadata in ${METADIR}"
