#!/bin/bash
# chkconfig: 35 99 01
# description: EC2 DNS registration in cloud.knime.com zone
# processname: knimeDNS

. /etc/init.d/functions

# always remember to terminate the ZONE variable with a "." !
ZONE="cloud.knime.com."
ZONEID="ZWGYZM9U5BTO1"
AWSCLI=/usr/bin/aws

do_start() {
	PUBLIC_IP="$( curl -s http://169.254.169.254/latest/meta-data/public-ipv4 )"
	[ -n "$PUBLIC_IP" ] || { echo "Could not determine public IP. Aborting." ; return 1; }

	IID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
	[ -n "$IID" ] || { echo "Could not determine EC2 instance ID. Aborting." ; return 1; }

	REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed "s/[a-z]$//")
	[ -n "$REGION" ] || { echo "Could not determine AWS region. Aborting." ; return 1; }

	ITAGS="""$($AWSCLI ec2 describe-tags --region $REGION | jq ".Tags[] | select(contains({ ResourceId : \"$IID\" }))")"""
	CENV="""$(echo "$ITAGS" | jq --raw-output 'select(contains({ Key : "Cluster-Env"  })) | .Value')"""
	CNAME="""$(echo "$ITAGS" | jq --raw-output 'select(contains({ Key : "Cluster-Name"  })) | .Value')"""
	CROLE="""$(echo "$ITAGS" | jq --raw-output 'select(contains({ Key : "Cluster-Role"  })) | .Value')"""

	echo "EC2 Tag detected: Cluster-Env=$CENV"
	echo "EC2 Tag detected: Cluster-Name=$CNAME"
	echo "EC2 Tag detected: Cluster-Role=$CROLE"

	if [ -z "$CENV" ] || [ -z "$CNAME" ] || [ -z "$CROLE" ] ; then
		echo "Cannot construct DNS name due to missing tags. Exiting."
		return 1
	fi

	if [ "$CROLE" = "worker" ] ; then
		echo "Detected worker node. Not registering a DNS name."
		return 0
	elif [ "$CROLE" != "master" ] ; then
		echo "Unknown node role: $CROLE. Exiting."
		return 1
	fi

	DNSNAME="""$(echo "$CNAME" | tr '.' '-' ).$(echo "$CENV" | tr '.' '-').$ZONE"""
	echo "Registering DNS name $DNSNAME"

	# RES_RECS="$($AWSCLI route53 list-resource-record-sets --hosted-zone-id $ZONEID )"
	# A_RECS="""$( echo "$RES_RECS" | jq --raw-output ".ResourceRecordSets[] | select(contains({ Type : \"A\" , Name : \"$DNSNAME\" })) | .ResourceRecords[].Value" )"""


	CREATE_RECORD_BATCH=$(cat <<-END
{
  "Comment": "Hadoop cluster master node DNS record (autogenerated)",
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "$DNSNAME",
        "Type": "A",
        "TTL": 60,
        "ResourceRecords": [
          {
            "Value": "$PUBLIC_IP"
          }
        ]
      }
    }
  ]
}
END
)

	TMPFILE=$(mktemp)
	echo "${CREATE_RECORD_BATCH}" >$TMPFILE

	$AWSCLI route53 change-resource-record-sets --hosted-zone-id "$ZONEID" --change-batch file://$TMPFILE
	ret=$?
	rm $TMPFILE

        base=$(basename $0)
        if [ $ret -eq 0 ]; then
            success $"$base startup"
        else
            failure $"$base startup"
        fi
        echo
        return $ret
}

case "$1" in
    start)
        do_start
        ;;
    *)
        echo "Usage: knimeDNS start"
        exit 1
        ;;
esac
exit $?
