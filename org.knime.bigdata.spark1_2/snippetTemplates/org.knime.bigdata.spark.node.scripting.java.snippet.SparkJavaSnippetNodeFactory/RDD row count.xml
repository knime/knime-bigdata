<?xml version="1.0" encoding="UTF-8"?>
<config xmlns="http://www.knime.org/2008/09/XMLConfig" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.knime.org/2008/09/XMLConfig http://www.knime.org/XMLConfig_2008_09.xsd" key="RDD row count.xml">
<entry key="Meta category" type="xstring" value="org.knime.bigdata.spark.node.scripting.java.snippet.SparkJavaSnippetNodeFactory"/>
<entry key="Category" type="xstring" value="KNIME"/>
<entry key="Name" type="xstring" value="RDD row count"/>
<entry key="Description" type="xstring" value="Returns the number of rows of the first RDD as new RDD."/>
<entry key="Version" type="xstring" value="version 1.x"/>
<config key="Snippet">
<entry key="scriptImports" type="xstring" value="// Your custom imports:%%00010import java.util.LinkedList;%%00010import java.util.List;%%00010import java.util.Arrays;%%00010"/>
<entry key="scriptFields" type="xstring" value="// Your custom variables:%%00010    /**%%00010     * Overwrite this method to return a manual created {@link StructType}. %%00010     * This method is called after the apply method.%%00010     * @param resultRDD the Spark RDD that contains the result%%00010     * @return {@link StructType} that defines the column names and types%%00010     * @throws InvalidSchemaException if the schema is invalid%%00010     */%%00010    protected StructType getSchema(final JavaRDD&lt;Row&gt; resultRDD) throws InvalidSchemaException {%%00010        final List&lt;StructField&gt; structFields = new LinkedList&lt;&gt;();%%00010        structFields.add(DataType.createStructField(&quot;Count&quot;, DataType.LongType, false));%%00010        return DataType.createStructType(structFields);%%00010    }%%00010    "/>
<entry key="scriptBody" type="xstring" value="// Enter your code here:%%00010%%00009%%00009final JavaRDD&lt;Long&gt; rdd = sc.parallelize(Arrays.asList(rowRDD1.count()));%%00010%%00009%%00009final JavaRDD&lt;Row&gt; result = rdd.map(new Function&lt;Long, Row&gt;(){%%00010%%00009%%00009%%00009private static final long serialVersionUID = 1L;%%00010%%00009%%00009%%00009public Row call(Long l){%%00010%%00009%%00009%%00009%%00009final RowBuilder builder = RowBuilder.emptyRow();%%00010%%00009%%00009%%00009%%00009builder.add(l);%%00010%%00009%%00009%%00009%%00009return builder.build();%%00010%%00009%%00009%%00009}%%00010%%00009%%00009});%%00010%%00009%%00009return result;"/>
<config key="jarFiles">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="outCols">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="outVars">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="inCols">
<entry key="array-size" type="xint" value="0"/>
</config>
<config key="inVars">
<entry key="array-size" type="xint" value="0"/>
</config>
<entry key="version" type="xstring" value="version 1.x"/>
<entry key="templateUUID" type="xstring" value="f54fb353-2b49-4eea-8be2-cda37990e5f1"/>
<entry key="runOnExecute" type="xboolean" value="false"/>
</config>
</config>
